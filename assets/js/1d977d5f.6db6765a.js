"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9624],{5223:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"vue-2-version/guide/autocomplete","title":"autocomplete","description":"Description","source":"@site/docs/vue-2-version/guide/autocomplete.md","sourceDirName":"vue-2-version/guide","slug":"/vue-2-version/guide/autocomplete","permalink":"/gmap-vue/docs/vue-2-version/guide/autocomplete","draft":false,"unlisted":false,"editUrl":"https://github.com/diegoazh/gmap-vue/docs/vue-2-version/guide/autocomplete.md","tags":[],"version":"current","frontMatter":{},"sidebar":"vue2Version","previous":{"title":"Introduction","permalink":"/gmap-vue/docs/vue-2-version/guide/"},"next":{"title":"cdn","permalink":"/gmap-vue/docs/vue-2-version/guide/cdn"}}');var s=t(6070),i=t(7252);const l={},a=void 0,p={},c=[{value:"Description",id:"description",level:2},{value:"Variables",id:"variables",level:2},{value:"Source code",id:"source-code",level:2},{value:"How to use it",id:"how-to-use-it",level:2},{value:"HTML examples",id:"html-examples",level:2},{value:"Test the component",id:"test-the-component",level:2}];function r(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"This component helps you to find and select a place on Google Maps API."}),"\n",(0,s.jsxs)(n.p,{children:["For more information read the Google Maps documentation for ",(0,s.jsx)(n.a,{href:"https://developers.google.com/maps/documentation/javascript/places-autocomplete",children:"autocomplete"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["It is exported with the name ",(0,s.jsx)(n.code,{children:"GmapAutocomplete"}),"."]}),"\n",(0,s.jsxs)(n.admonition,{title:"Breaking changes",type:"warning",children:[(0,s.jsxs)(n.p,{children:["From ",(0,s.jsx)(n.code,{children:"v2.x.x"})," we change the slot used in this component until ",(0,s.jsx)(n.code,{children:"v1.5.0"})," and below it was named ",(0,s.jsx)(n.code,{children:"input"})," from ",(0,s.jsx)(n.code,{children:"v2.x.x"})," we use the ",(0,s.jsx)(n.code,{children:"default"})," slot and its fallback content if you don't provide a slot content."]}),(0,s.jsxs)(n.p,{children:["For more information please read the ",(0,s.jsx)(n.a,{href:"https://vuejs.org/v2/guide/components-slots.html",children:"Vue.js documentation for slots"}),"."]})]}),"\n",(0,s.jsx)(n.h2,{id:"variables",children:"Variables"}),"\n",(0,s.jsxs)(n.p,{children:["This component save the original autocomplete object provided by Google Maps in a property called ",(0,s.jsx)(n.code,{children:"$autocomplete"}),", as the example below."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"this.$autocomplete = new google.maps.places.Autocomplete(...);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"source-code",children:"Source code"}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.mdxAdmonitionTitle,{children:["Click to se the source code of ",(0,s.jsx)("code",{children:"autocomplete.vue"})," component"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-vue",children:"<template>\n  <div>\n    <slot v-bind:attrs=\"$attrs\" v-bind:listeners=\"$listeners\">\n      <input ref=\"input\" v-bind=\"$attrs\" v-on=\"$listeners\" />\n    </slot>\n  </div>\n</template>\n\n<script>\nimport {\n  downArrowSimulator,\n  getPropsValues,\n  bindProps,\n} from '../utils/helpers';\nimport { autocompleteMappedProps } from '../utils/mapped-props-by-map-element';\n\nexport default {\n  props: {\n    bounds: {\n      type: Object,\n    },\n    componentRestrictions: {\n      type: Object,\n    },\n    types: {\n      type: Array,\n      default: undefined\n    },\n    selectFirstOnEnter: {\n      required: false,\n      type: Boolean,\n      default: false,\n    },\n    slotRefName: {\n      required: false,\n      type: String,\n      default: 'input',\n    },\n    childRefName: {\n      required: false,\n      type: String,\n      default: 'input',\n    },\n    options: {\n      type: Object,\n    },\n    setFieldsTo: {\n      required: false,\n      type: Array,\n      default: null,\n    },\n  },\n  async mounted() {\n    await this.$gmapApiPromiseLazy();\n\n    let scopedInput = null;\n\n    if (this.$scopedSlots.default) {\n      if (!Object.keys(this.$scopedSlots.default()[0].context.$refs).length) {\n        throw new Error(\n          'If you use the slot input you must add a ref to the element that you will use as the input, and if you use a vue component, eg: v-text-field, etc, you need to set the childRefName indicating what is the ref name of the HTML input elemnt behind your component.'\n        );\n      }\n\n      scopedInput = this.$scopedSlots.default()[0].context.$refs[\n        this.slotRefName\n      ];\n\n      if (scopedInput && scopedInput.$refs) {\n        scopedInput = scopedInput.$refs[this.childRefName];\n      }\n\n      if (scopedInput) {\n        this.$refs.input = scopedInput;\n      }\n    }\n\n    if (this.selectFirstOnEnter) {\n      downArrowSimulator(this.$refs.input);\n    }\n\n    if (typeof google.maps.places.Autocomplete !== 'function') {\n      throw new Error(\n        \"google.maps.places.Autocomplete is undefined. Did you add 'places' to libraries when loading Google Maps?\"\n      );\n    }\n\n    const autocompleteOptions = {\n      ...getPropsValues(this, autocompleteMappedProps),\n      ...this.options,\n    };\n\n    this.$autocomplete = new google.maps.places.Autocomplete(\n      this.$refs.input,\n      autocompleteOptions\n    );\n\n    bindProps(this, this.$autocomplete, autocompleteMappedProps);\n\n    if (this.setFieldsTo) {\n      this.$autocomplete.setFields(this.setFieldsTo);\n    }\n\n    this.$autocomplete.addListener('place_changed', () => {\n      this.$emit('place_changed', this.$autocomplete.getPlace());\n    });\n  },\n  watch: {\n    componentRestrictions(v) {\n      if (v !== undefined) {\n        this.$autocomplete.setComponentRestrictions(v);\n      }\n    },\n  },\n};\n<\/script>\n"})})]}),"\n",(0,s.jsxs)(n.p,{children:["If you need to know what are ",(0,s.jsx)(n.code,{children:"mappedProps"})," please read the general concepts of this application ",(0,s.jsx)(n.a,{href:"/code/utils/mapped-props-by-map-element.html#autocompletemappedprops",children:"here"}),"."]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.mdxAdmonitionTitle,{children:["Mapped Props of ",(0,s.jsx)("code",{children:"GmapAutocomplete"})," component"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"export const autocompleteMappedProps = {\n  bounds: {\n    type: Object,\n  },\n  componentRestrictions: {\n    type: Object,\n    noBind: true,\n  },\n  types: {\n    type: Array,\n    default() {\n      return [];\n    },\n  },\n};\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"how-to-use-it",children:"How to use it"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-vue",children:'<template>\n  \x3c!-- you can use the auto close form if you don\'t use the slot --\x3e\n  <gmap-autocomplete />\n\n  <gmap-map :center="center" :zoom="7" style="width: 100%; height: 500px">\n  </gmap-map>\n</template>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-vue",children:'<template>\n  \x3c!-- or use the common form with the slot --\x3e\n  <gmap-autocomplete></gmap-autocomplete>\n\n  <gmap-map :center="center" :zoom="7" style="width: 100%; height: 500px">\n  </gmap-map>\n</template>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If you need to know the ",(0,s.jsx)(n.strong,{children:"API of this component"})," please read it ",(0,s.jsx)(n.a,{href:"/code/components/autocomplete-input.html",children:"here"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"html-examples",children:"HTML examples"}),"\n",(0,s.jsx)(n.admonition,{title:"Complete HTML example",type:"note",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<body>\n  <div id="root">\n    <h1>Autocomplete Example (#164)</h1>\n    <label>\n      AutoComplete\n      <gmap-autocomplete\n        placeholder="This is a placeholder text"\n        @place_changed="setPlace">\n      </gmap-autocomplete>\n      <button @click="usePlace">Add</button>\n    </label>\n    <br />\n\n    <gmap-map\n      style="width: 600px; height: 300px;"\n      :zoom="1"\n      :center="{lat: 0, lng: 0}">\n      <gmap-marker\n        v-for="(marker, index) in markers"\n        :key="index"\n        :position="marker.position"></gmap-marker>\n      <gmap-marker v-if="this.place" label="&#x2605;" :position="{\n          lat: this.place.geometry.location.lat(),\n          lng: this.place.geometry.location.lng(),\n        }"></gmap-marker>\n    </gmap-map>\n  </div>\n\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.11/vue.js"><\/script>\n  <script src="https://cdn.jsdelivr.net/npm/gmap-vue@1.2.2/dist/gmap-vue.min.js"><\/script>\n\n  <script>\n    Vue.use(GmapVue, {\n      load: {\n        key: \'AIzaSyDf43lPdwlF98RCBsJOFNKOkoEjkwxb5Sc\',\n        libraries: \'places\'\n      },\n    });\n\n    document.addEventListener(\'DOMContentLoaded\', function () {\n      new Vue({\n        el: \'#root\',\n        data: {\n          markers: [],\n          place: null,\n        },\n        methods: {\n          setDescription(description) {\n            this.description = description;\n          },\n          setPlace(place) {\n            this.place = place\n          },\n          usePlace(place) {\n            if (this.place) {\n              this.markers.push({\n                position: {\n                  lat: this.place.geometry.location.lat(),\n                  lng: this.place.geometry.location.lng(),\n                }\n              })\n              this.place = null;\n            }\n          }\n        }\n      });\n    });\n  <\/script>\n</body>\n'})})}),"\n",(0,s.jsx)(n.admonition,{title:"Basic HTML example",type:"note",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<body>\n  <div id="root">\n    <h3>Changing Default Place updates text box</h3>\n    <small>\n      <ol>\n        <li>select a place</li>\n        <li>click in place input</li>\n        <li>select one option of the list</li>\n        <li>press <kbd>&#9166;</kbd></li>\n      </ol>\n    </small>\n    <button @click="setDescription(\'Tokyo\')">Set to Tokyo</button>&nbsp;\n    <button @click="setDescription(\'Shanghai\')">Set to Shanghai</button>&nbsp;\n    <button @click="setDescription(\'Seoul\')">Set to Seoul</button>\n    <br />\n    <br />\n    <label>\n      <strong>Place:</strong>\n      <gmap-autocomplete\n        :value="description"\n        placeholder="This is a placeholder text"\n        @place_changed="setPlace"\n        :select-first-on-enter="true"\n      >\n      </gmap-autocomplete>\n    </label>\n    <br />\n    <p>Use a place input to see coordinates</p>\n    <strong>lat:</strong> <i>{{ latLng.lat }}</i\n    >, <strong>lng:</strong> <i>{{ latLng.lng }}</i>\n\n    <div>\n      <h3>Options work</h3>\n      You cannot find the state of Texas in this\n      <label>\n        Only locations in Singapore:\n        <gmap-autocomplete\n          :value="description2"\n          @place_changed="setPlace2"\n          :options="{\n            bounds: { north: 1.4, south: 1.2, east: 104, west: 102 },\n            strictBounds: true,\n          }"\n          :select-first-on-enter="true"\n        >\n        </gmap-autocomplete>\n      </label>\n      <br />\n      <p>Use a place input to see coordinates</p>\n      <strong>lat:</strong> <i>{{ latLng2.lat }}</i>,\n      <strong>lng:</strong> <i>{{ latLng2.lng }}</i>\n    </div>\n  </div>\n\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.11/vue.js"><\/script>\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.js"><\/script>\n  <script src="https://cdn.jsdelivr.net/npm/gmap-vue@1.2.2/dist/gmap-vue.min.js"><\/script>\n\n  <script>\n    Vue.use(GmapVue, {\n      load: {\n        key: \'AIzaSyDf43lPdwlF98RCBsJOFNKOkoEjkwxb5Sc\',\n        libraries: \'places\'\n      },\n    });\n\n    document.addEventListener(\'DOMContentLoaded\', function () {\n      new Vue({\n        el: \'#root\',\n        data: {\n          description: "Singapore",\n          description2: "Singapore",\n          latLng: {\n            lat: "",\n            lng: "",\n          },\n          latLng2: {\n            lat: "",\n            lng: "",\n          },\n        },\n        methods: {\n          setDescription(description) {\n            this.description = description;\n          },\n          setPlace(place) {\n            if (!place?.geometry) return;\n\n            this.latLng = {\n              lat: place.geometry.location.lat(),\n              lng: place.geometry.location.lng(),\n            };\n\n            this.description = place.name;\n          },\n          setPlace2(place) {\n            if (!place?.geometry) return;\n\n            this.latLng2 = {\n              lat: place.geometry.location.lat(),\n              lng: place.geometry.location.lng(),\n            };\n\n            this.description2 = place.name;\n          },\n        },\n      });\n    });\n  <\/script>\n</body>\n'})})}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsx)(n.p,{children:"The autocomplete supports cutsom text field via scoped slot"}),(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Important"}),": from v1.5.0 and below you must use ",(0,s.jsx)(n.code,{children:"v-slot:input"})," instead of ",(0,s.jsx)(n.code,{children:"v-slot:default"}),"."]}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'          <gmap-autocomplete class="introInput" >\n                    <template v-slot:default="slotProps">\n                        <v-text-field outlined\n                                      prepend-inner-icon="place"\n                                      placeholder="Location Of Event"\n                                      ref="input"\n                                      v-on:listeners="slotProps.listeners"\n                                      v-on:attrs="slotProps.attrs">\n                        </v-text-field>\n                    </template>\n        </gmap-autocomplete>\n'})}),(0,s.jsx)(n.p,{children:"The ref on the element must be unique. If you create more than one autocomplete, each one should have a unique ref and it must be mentioned in the slot-ref-name prop. Like this:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'          <gmap-autocomplete class="introInput" >\n                    <template v-slot:default="slotProps">\n                        <v-text-field outlined\n                                      prepend-inner-icon="place"\n                                      placeholder="Location Of Event"\n                                      ref="input"\n                                      v-on:listeners="slotProps.listeners"\n                                      v-on:attrs="slotProps.attrs">\n                        </v-text-field>\n                    </template>\n        </gmap-autocomplete>\n        <gmap-autocomplete class="introInput" slot-ref-name="input2">\n                    <template v-slot:default="slotProps">\n                        <v-text-field outlined\n                                      prepend-inner-icon="place"\n                                      placeholder="Location Of Event"\n                                      ref="input2"\n                                      v-on:listeners="slotProps.listeners"\n                                      v-on:attrs="slotProps.attrs">\n                        </v-text-field>\n                    </template>\n        </gmap-autocomplete>\n'})}),(0,s.jsx)(n.p,{children:"If the element in the slot is a vue component then it must have a child ref called input (like in vuetify text-field) or specify a custom name via the child-ref-name prop (only works one level deep into a component)."}),(0,s.jsxs)(n.p,{children:["The v-on",":listeners"," is rquired, v-on",":attrs"," may or may not be required depending on your implementation."]})]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"Cutsom text fields via scoped slot requires vue 2.6 or higher for the new slot support."})}),"\n",(0,s.jsx)(n.h2,{id:"test-the-component",children:"Test the component"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"This is the first HTML example"}),"\n"]}),"\n",(0,s.jsx)("eg-base",{children:(0,s.jsx)("eg-autocomplete",{})}),"\n",(0,s.jsx)(n.admonition,{title:"Click to see the simple html example",type:"note",children:(0,s.jsx)("eg-base",{children:(0,s.jsx)("eg-basic-autocomplete",{})})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}},7252:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var o=t(758);const s={},i=o.createContext(s);function l(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);