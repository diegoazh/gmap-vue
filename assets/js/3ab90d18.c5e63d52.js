"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1247],{7377:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"vue-2-version/guide/drawing-manager","title":"drawing-manager","description":"Description","source":"@site/docs/vue-2-version/guide/drawing-manager.md","sourceDirName":"vue-2-version/guide","slug":"/vue-2-version/guide/drawing-manager","permalink":"/gmap-vue/docs/vue-2-version/guide/drawing-manager","draft":false,"unlisted":false,"editUrl":"https://github.com/diegoazh/gmap-vue/docs/vue-2-version/guide/drawing-manager.md","tags":[],"version":"current","frontMatter":{},"sidebar":"vue2Version","previous":{"title":"cluster","permalink":"/gmap-vue/docs/vue-2-version/guide/cluster"},"next":{"title":"extra-examples","permalink":"/gmap-vue/docs/vue-2-version/guide/extra-examples"}}');var a=t(6070),i=t(7252);const s={},l=void 0,r={},p=[{value:"Description",id:"description",level:2},{value:"Variables",id:"variables",level:2},{value:"Source code",id:"source-code",level:2},{value:"How to use it",id:"how-to-use-it",level:2},{value:"HTML examples",id:"html-examples",level:2},{value:"Test the component",id:"test-the-component",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)(e.p,{children:"This component helps you to drawing shapes on over the map."}),"\n",(0,a.jsxs)(e.p,{children:["For more information read the Google Maps documentation\nfor ",(0,a.jsx)(e.a,{href:"https://developers.google.com/maps/documentation/javascript/drawinglayer",children:"drawing manager"}),"."]}),"\n",(0,a.jsxs)(e.p,{children:["It is exported with the name ",(0,a.jsx)(e.code,{children:"GmapDrawingManager"}),"."]}),"\n",(0,a.jsx)(e.h2,{id:"variables",children:"Variables"}),"\n",(0,a.jsxs)(e.p,{children:["This component save the original drawing manager object provided by Google Maps in a property\ncalled ",(0,a.jsx)(e.code,{children:"$drawingManagerObject"}),", as the example below."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"  this.$drawingManagerObject = new google.maps.drawing.DrawingManager(...);\n"})}),"\n",(0,a.jsx)(e.h2,{id:"source-code",children:"Source code"}),"\n",(0,a.jsxs)(e.admonition,{type:"note",children:[(0,a.jsxs)(e.mdxAdmonitionTitle,{children:["Click to se the source code of ",(0,a.jsx)("code",{children:"drawing-manager.vue"})," component"]}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-vue",children:"<template>\n  <div>\n    <slot\n      v-bind:setDrawingMode=\"setDrawingMode\"\n      v-bind:deleteSelection=\"deleteSelection\"\n    />\n  </div>\n</template>\n\n<script>\nimport MapElementMixin from '../mixins/map-element';\nimport { drawingManagerMappedProps } from '../utils/mapped-props-by-map-element';\nimport { bindProps, getPropsValues } from '../utils/helpers';\n\nexport default {\n  mixins: [MapElementMixin],\n  props: {\n    circleOptions: {\n      type: Object,\n    },\n    markerOptions: {\n      type: Object,\n    },\n    polygonOptions: {\n      type: Object,\n    },\n    polylineOptions: {\n      type: Object,\n    },\n    rectangleOptions: {\n      type: Object,\n    },\n    position: {\n      type: String,\n    },\n    shapes: {\n      type: Array,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      selectedShape: null,\n      drawingModes: [],\n      options: {\n        drawingMode: null,\n        drawingControl: true,\n        drawingControlOptions: {},\n      },\n    };\n  },\n  methods: {\n    setDrawingMode(mode) {\n      this.$drawingManagerObject.setDrawingMode(mode);\n    },\n    drawAll() {\n      const shapeType = {\n        circle: google.maps.Circle,\n        marker: google.maps.Marker,\n        polygon: google.maps.Polygon,\n        polyline: google.maps.Polyline,\n        rectangle: google.maps.Rectangle,\n      };\n\n      const self = this;\n      this.shapes.forEach((shape) => {\n        const shapeDrawing = new shapeType[shape.type](shape.overlay);\n        shapeDrawing.setMap(this.$map);\n        shape.overlay = shapeDrawing;\n        google.maps.event.addListener(shapeDrawing, 'click', () => {\n          self.setSelection(shape);\n        });\n      });\n    },\n    clearAll() {\n      this.clearSelection();\n      this.shapes.forEach((shape) => {\n        shape.overlay.setMap(null);\n      });\n    },\n    clearSelection() {\n      if (this.selectedShape) {\n        this.selectedShape.overlay.set('fillColor', '#777');\n        this.selectedShape.overlay.set('strokeColor', '#999');\n        this.selectedShape.overlay.setEditable(false);\n        this.selectedShape.overlay.setDraggable(false);\n        this.selectedShape = null;\n      }\n    },\n    setSelection(shape) {\n      this.clearSelection();\n      this.selectedShape = shape;\n      shape.overlay.setEditable(true);\n      shape.overlay.setDraggable(true);\n      this.selectedShape.overlay.set('fillColor', '#555');\n      this.selectedShape.overlay.set('strokeColor', '#777');\n    },\n    deleteSelection() {\n      if (this.selectedShape) {\n        this.selectedShape.overlay.setMap(null);\n        const index = this.shapes.indexOf(this.selectedShape);\n        if (index > -1) {\n          this.shapes.splice(index, 1);\n        }\n      }\n    },\n    addShape(shape) {\n      this.setDrawingMode(null);\n      this.shapes.push(shape);\n      const self = this;\n      google.maps.event.addListener(shape.overlay, 'click', () => {\n        self.setSelection(shape);\n      });\n      google.maps.event.addListener(shape.overlay, 'rightclick', () => {\n        self.deleteSelection();\n      });\n      this.setSelection(shape);\n    },\n  },\n  watch: {\n    position(position) {\n      if (this.$drawingManagerObject) {\n        const drawingControlOptions = {\n          position:\n            position && google.maps.ControlPosition[position]\n              ? google.maps.ControlPosition[position]\n              : google.maps.ControlPosition.TOP_LEFT,\n          drawingModes: this.drawingModes,\n        };\n        this.$drawingManagerObject.setOptions({ drawingControlOptions });\n      }\n    },\n    circleOptions(circleOptions) {\n      if (this.$drawingManagerObject) {\n        this.$drawingManagerObject.setOptions({ circleOptions });\n      }\n    },\n    markerOptions(markerOptions) {\n      if (this.$drawingManagerObject) {\n        this.$drawingManagerObject.setOptions({ markerOptions });\n      }\n    },\n    polygonOptions(polygonOptions) {\n      if (this.$drawingManagerObject) {\n        this.$drawingManagerObject.setOptions({ polygonOptions });\n      }\n    },\n    polylineOptions(polylineOptions) {\n      if (this.$drawingManagerObject) {\n        this.$drawingManagerObject.setOptions({ polylineOptions });\n      }\n    },\n    rectangleOptions(rectangleOptions) {\n      if (this.$drawingManagerObject) {\n        this.$drawingManagerObject.setOptions({ rectangleOptions });\n      }\n    },\n  },\n  provide() {\n    // Infowindow needs this to be immediately available\n    const promise = await this.$mapPromise\n      .then((map) => {\n        this.$map = map;\n\n        // Initialize the maps with the given options\n        const initialOptions = {\n          ...this.options,\n          map,\n          ...getPropsValues(this, drawingManagerMappedProps),\n        };\n\n        const { options: extraOptions, ...finalOptions } = initialOptions;\n\n        this.drawingModes = Object.keys(finalOptions).reduce((modes, opt) => {\n          const val = opt.split('Options');\n\n          if (val.length > 1) {\n            modes.push(val[0]);\n          }\n\n          return modes;\n        }, []);\n\n        const position =\n          this.position && google.maps.ControlPosition[this.position]\n            ? google.maps.ControlPosition[this.position]\n            : google.maps.ControlPosition.TOP_LEFT;\n\n        finalOptions.drawingMode = null;\n        finalOptions.drawingControl = !this.$scopedSlots.default;\n        finalOptions.drawingControlOptions = {\n          drawingModes: this.drawingModes,\n          position,\n        };\n\n        // https://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n        this.$drawingManagerObject = new google.maps.drawing.DrawingManager(\n          finalOptions\n        );\n\n        bindProps(this, this.$drawingManagerObject, drawingManagerMappedProps);\n\n        this.$drawingManagerObject.addListener('overlaycomplete', (e) =>\n          this.addShape(e)\n        );\n\n        this.$map.addListener('click', this.clearSelection);\n\n        if (this.shapes.length) {\n          this.drawAll();\n        }\n\n        return this.$drawingManagerObject;\n      })\n      .catch((error) => {\n        throw error;\n      });\n\n    this.$drawingManagerPromise = promise;\n    return { $drawingManagerPromise: promise };\n  },\n  destroyed() {\n    this.clearAll();\n\n    // Note: not all Google Maps components support maps\n    if (this.$drawingManagerObject && this.$drawingManagerObject.setMap) {\n      this.$drawingManagerObject.setMap(null);\n    }\n  },\n};\n<\/script>\n\n"})})]}),"\n",(0,a.jsxs)(e.p,{children:["If you need to know what are ",(0,a.jsx)(e.code,{children:"mappedProps"})," please read the general concepts of this\napplication ",(0,a.jsx)(e.a,{href:"/code/utils/mapped-props-by-map-element.html#autocompletemappedprops",children:"here"}),"."]}),"\n",(0,a.jsxs)(e.admonition,{type:"note",children:[(0,a.jsxs)(e.mdxAdmonitionTitle,{children:["Mapped Props of ",(0,a.jsx)("code",{children:"GmapDrawingManager"})," component"]}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"\nexport const drawingManagerMappedProps = {\n  circleOptions: {\n    type: Object,\n    twoWay: false,\n    noBind: true,\n  },\n  markerOptions: {\n    type: Object,\n    twoWay: false,\n    noBind: true,\n  },\n  polygonOptions: {\n    type: Object,\n    twoWay: false,\n    noBind: true,\n  },\n  polylineOptions: {\n    type: Object,\n    twoWay: false,\n    noBind: true,\n  },\n  rectangleOptions: {\n    type: Object,\n    twoWay: false,\n    noBind: true,\n  },\n};\n\n"})})]}),"\n",(0,a.jsx)(e.h2,{id:"how-to-use-it",children:"How to use it"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-vue",children:'<template>\n  <gmap-map\n    ref="mapRef"\n    :center="mapCenter"\n    :zoom="7"\n    map-type-id="roadmap"\n    style="width: 100%; height: 800px"\n    :options="{\n        zoomControl: true,\n        mapTypeControl: true,\n        scaleControl: false,\n        streetViewControl: false,\n        rotateControl: false,\n        fullscreenControl: false,\n        disableDefaultUi: false,\n        draggable: mapDraggable,\n        draggableCursor: mapCursor\n      }"\n  >\n    \x3c!-- use the default slot to pass markers to it --\x3e\n    <gmap-drawing-manager></gmap-drawing-manager>\n  </gmap-map>\n</template>\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-vue",children:'<template>\n  <gmap-map\n    ref="mapRef"\n    :center="mapCenter"\n    :zoom="7"\n    map-type-id="roadmap"\n    style="width: 100%; height: 800px"\n    :options="{\n        zoomControl: true,\n        mapTypeControl: true,\n        scaleControl: false,\n        streetViewControl: false,\n        rotateControl: false,\n        fullscreenControl: false,\n        disableDefaultUi: false,\n        draggable: mapDraggable,\n        draggableCursor: mapCursor\n      }"\n  >\n    \x3c!-- or with an slot --\x3e\n    <gmap-drawing-manager>\n      <template v-slot="on">\n        <your-toolbar-component\n          @drawingmode_changed="on.setDrawingMode($event)"\n          @delete_selection="on.deleteSelection()"\n          @save="mapMode=\'ready\'"\n        />\n      </template>\n    </gmap-drawing-manager>\n  </gmap-map>\n</template>\n'})}),"\n",(0,a.jsxs)(e.p,{children:["If you need to know the ",(0,a.jsx)(e.strong,{children:"API of this component"})," please read it ",(0,a.jsx)(e.a,{href:"/code/components/drawing-manager.html",children:"here"}),"."]}),"\n",(0,a.jsx)(e.h2,{id:"html-examples",children:"HTML examples"}),"\n",(0,a.jsx)(e.admonition,{title:"HTML example",type:"note",children:(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-html",children:"<body>\n  <div id=\"root\">\n    <h1>Drawing Manager Example</h1>\n    <div style=\"width:100%; display: flex; justify-content: center;\">\n      <span style=\"width:auto\" />\n      {{ mapMode }} - {{ toolbarPosition }}\n      <span style=\"width:auto\" />\n      <button @click=\"setPos\">Position</button>\n      <button @click=\"mapMode='edit'\">Edit</button>\n    </div>\n    <br />\n    <gmap-map\n      ref=\"mapRef\"\n      :center=\"mapCenter\"\n      :zoom=\"7\"\n      map-type-id=\"roadmap\"\n      style=\"width: 100%; height: 800px\"\n      :options=\"{\n          zoomControl: true,\n          mapTypeControl: true,\n          scaleControl: false,\n          streetViewControl: false,\n          rotateControl: false,\n          fullscreenControl: false,\n          disableDefaultUi: false,\n          draggable: mapDraggable,\n          draggableCursor: mapCursor\n        }\"\n    >\n      <template #visible>\n        <gmap-drawing-manager\n          v-if=\"mapMode==='edit'\"\n          :position=\"toolbarPosition\"\n          :rectangle-options=\"rectangleOptions\"\n          :circle-options=\"circleOptions\"\n          :polyline-options=\"polylineOptions\"\n          :shapes=\"shapes\"\n        />\n      </template>\n    </gmap-map>\n  </div>\n\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.11/vue.js\"><\/script>\n  <script src=\"https://cdn.jsdelivr.net/npm/gmap-vue@1.2.2/dist/gmap-vue.min.js\"><\/script>\n\n  <script>\n    Vue.use(GmapVue, {\n      load: {\n        key: 'AIzaSyDf43lPdwlF98RCBsJOFNKOkoEjkwxb5Sc',\n        libraries: 'places,drawing'\n      }\n    });\n\n    document.addEventListener('DOMContentLoaded', function() {\n      new Vue({\n        el: '#root',\n        data: {\n          mapCenter: { lat: 4.5, lng: 99 },\n          mapMode: null,\n          toolbarPosition: 'TOP_CENTER',\n          mapDraggable: true,\n          mapCursor: null,\n          shapes: [],\n          rectangleOptions: {\n            fillColor: '#777',\n            fillOpacity: 0.4,\n            strokeWeight: 2,\n            strokeColor: '#999',\n            draggable: false,\n            editable: false,\n            clickable: true\n          },\n          circleOptions: {\n            fillColor: '#777',\n            fillOpacity: 0.4,\n            strokeWeight: 2,\n            strokeColor: '#999',\n            draggable: false,\n            editable: false,\n            clickable: true\n          },\n          polylineOptions: {\n            fillColor: '#777',\n            fillOpacity: 0.4,\n            strokeWeight: 2,\n            strokeColor: '#999',\n            draggable: false,\n            editable: false,\n            clickable: true\n          }\n        },\n        watch: {\n          mapMode(newMode, oldMode) {\n            if (newMode === 'ready') {\n              if (oldMode === 'edit') {\n                this.mapDraggable = true;\n                this.mapCursor = null;\n                return;\n              }\n            }\n\n            if (newMode === 'edit') {\n              this.mapDraggable = false;\n              this.mapCursor = 'default';\n            }\n          }\n        },\n        mounted() {\n          this.mapMode = 'ready';\n        },\n        methods: {\n          setPos() {\n            const posTypes = [\n              'TOP_CENTER',\n              'TOP_LEFT',\n              'TOP_RIGHT',\n              'LEFT_TOP',\n              'RIGHT_TOP',\n              'LEFT_CENTER',\n              'RIGHT_CENTER',\n              'LEFT_BOTTOM',\n              'RIGHT_BOTTOM',\n              'BOTTOM_CENTER',\n              'BOTTOM_LEFT',\n              'BOTTOM_RIGHT'\n            ];\n\n            this.toolbarPosition =\n              posTypes[Math.floor(Math.random() * posTypes.length)];\n          }\n        }\n      });\n    });\n  <\/script>\n</body>\n"})})}),"\n",(0,a.jsx)(e.admonition,{title:"HML examples with slot",type:"note",children:(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-html",children:'<body>\n  <div id="root">\n    <h1>Drawing Manager Example</h1>\n    <div style="width:100%; display: flex; justify-content: center;">\n      <span style="width: auto;" />\n      {{ mapMode }}\n      <span style="width: auto;" />\n      <button @click="mapMode=\'edit\'">Edit</button>\n    </div>\n    <br />\n    <gmap-map\n      ref="mapRef"\n      :center="mapCenter"\n      :zoom="7"\n      map-type-id="roadmap"\n      style="width: 100%; height: 800px; display:flex; justify-content: center; align-items: flex-start;"\n      :options="{\n        zoomControl: true,\n        mapTypeControl: true,\n        scaleControl: false,\n        streetViewControl: false,\n        rotateControl: false,\n        fullscreenControl: false,\n        disableDefaultUi: false,\n        draggable: mapDraggable,\n        draggableCursor: mapCursor\n      }"\n    >\n      <template #visible>\n        <gmap-drawing-manager\n          v-if="mapMode===\'edit\'"\n          :rectangle-options="rectangleOptions"\n          :circle-options="circleOptions"\n          :polyline-options="polylineOptions"\n          :polygon-options="polygonOptions"\n          :shapes="shapes"\n        >\n          <template v-slot="on">\n            <drawing-toolbar\n              @drawingmode_changed="on.setDrawingMode($event)"\n              @delete_selection="on.deleteSelection()"\n              @save="mapMode=\'ready\'"\n            />\n          </template>\n        </gmap-drawing-manager>\n      </template>\n    </gmap-map>\n  </div>\n\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.11/vue.js"><\/script>\n  <script src="https://cdn.jsdelivr.net/npm/gmap-vue@1.2.2/dist/gmap-vue.min.js"><\/script>\n\n  <script>\n    // Only for example purposes\n    // In a real application you would simply create a separate component\n    const toolbarTemplate =\n      \'<div style="background-color: #040404; display: flex; position: absolute; padding: 8px">\' +\n      "  <div><button @click=\\"$emit(\'drawingmode_changed\', \'rectangle\')\\">Rectangle</button></div>" +\n      "  <div><button @click=\\"$emit(\'drawingmode_changed\', \'circle\')\\">Circle</button></div>" +\n      "  <div><button @click=\\"$emit(\'drawingmode_changed\', \'polyline\')\\">Line</button></div>" +\n      "  <div><button @click=\\"$emit(\'drawingmode_changed\', \'polygon\')\\">Polygon</button></div>" +\n      "  <div><button @click=\\"$emit(\'delete_selection\')\\">Delete</button></div>" +\n      "  <div><button @click=\\"$emit(\'save\')\\">Save</button></div>" +\n      "</div>";\n\n    Vue.use(GmapVue, {\n      load: {\n        key: \'AIzaSyDf43lPdwlF98RCBsJOFNKOkoEjkwxb5Sc\',\n        libraries: \'places,drawing\'\n      }\n    });\n\n    document.addEventListener(\'DOMContentLoaded\', function() {\n      new Vue({\n        el: \'#root\',\n        components: {\n          drawingToolbar: {\n            template: toolbarTemplate\n          }\n        },\n        data: {\n          mapCenter: { lat: 4.5, lng: 99 },\n          mapMode: null,\n          mapDraggable: true,\n          mapCursor: null,\n          shapes: [],\n          rectangleOptions: {\n            fillColor: \'#777\',\n            fillOpacity: 0.4,\n            strokeWeight: 2,\n            strokeColor: \'#999\',\n            draggable: false,\n            editable: false,\n            clickable: true\n          },\n          circleOptions: {\n            fillColor: \'#777\',\n            fillOpacity: 0.4,\n            strokeWeight: 2,\n            strokeColor: \'#999\',\n            draggable: false,\n            editable: false,\n            clickable: true\n          },\n          polylineOptions: {\n            fillColor: \'#777\',\n            fillOpacity: 0.4,\n            strokeWeight: 2,\n            strokeColor: \'#999\',\n            draggable: false,\n            editable: false,\n            clickable: true\n          },\n          polygonOptions: {\n            fillColor: \'#777\',\n            fillOpacity: 0.4,\n            strokeWeight: 2,\n            strokeColor: \'#999\',\n            draggable: false,\n            editable: false,\n            clickable: true\n          }\n        },\n        watch: {\n          mapMode(newMode, oldMode) {\n            if (newMode === \'ready\') {\n              if (oldMode === \'edit\') {\n                this.mapDraggable = true;\n                this.mapCursor = null;\n                return;\n              }\n            }\n\n            if (newMode === \'edit\') {\n              this.mapDraggable = false;\n              this.mapCursor = \'default\';\n            }\n          }\n        },\n        mounted() {\n          this.mapMode = \'ready\';\n        }\n      });\n    });\n  <\/script>\n</body>\n'})})}),"\n",(0,a.jsx)(e.admonition,{type:"warning",children:(0,a.jsxs)(e.p,{children:["If you are using the runtime-only build the template on ",(0,a.jsx)(e.code,{children:"toolbarTemplate"})," will not work, instead of that\nyou need to pre-compile the templates into render functions, or use the compiler-included build."]})}),"\n",(0,a.jsx)(e.h2,{id:"test-the-component",children:"Test the component"}),"\n",(0,a.jsx)(e.admonition,{title:"Click to see the HTML example in action",type:"note",children:(0,a.jsx)("eg-base",{libraries:"places,drawing",children:(0,a.jsx)("eg-drawing-manager",{})})}),"\n",(0,a.jsx)(e.admonition,{title:"Click to see the HTML example with slot in action",type:"note",children:(0,a.jsx)("eg-base",{libraries:"places,drawing",children:(0,a.jsx)("eg-drawing-manager-with-slot",{})})})]})}function c(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},7252:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>l});var o=t(758);const a={},i=o.createContext(a);function s(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);