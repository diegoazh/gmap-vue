"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6572],{6035:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>n,toc:()=>r});const n=JSON.parse('{"id":"vue-3-version/guide/components/autocomplete","title":"Autocomplete","description":"This component helps you to find and select a place on Google Maps API. For more information read the Google Maps documentation for autocomplete.","source":"@site/docs/vue-3-version/guide/components/autocomplete.md","sourceDirName":"vue-3-version/guide/components","slug":"/vue-3-version/guide/components/autocomplete","permalink":"/gmap-vue/docs/vue-3-version/guide/components/autocomplete","draft":false,"unlisted":false,"editUrl":"https://github.com/diegoazh/gmap-vue/docs/vue-3-version/guide/components/autocomplete.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"autocomplete","sidebar_position":1,"sidebar_label":"Autocomplete"},"sidebar":"vue3Version","previous":{"title":"Components","permalink":"/gmap-vue/docs/category/components"},"next":{"title":"Map","permalink":"/gmap-vue/docs/vue-3-version/guide/components/map"}}');var s=o(6070),i=o(7252);const l={id:"autocomplete",sidebar_position:1,sidebar_label:"Autocomplete"},c="Autocomplete",a={},r=[{value:"Autocomplete instance",id:"autocomplete-instance",level:2},{value:"Source code",id:"source-code",level:2},{value:"How to use it",id:"how-to-use-it",level:2},{value:"Customizing your text field",id:"customizing-your-text-field",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"autocomplete",children:"Autocomplete"})}),"\n",(0,s.jsxs)(t.p,{children:["This component helps you to find and select a place on Google Maps API. For more information read the Google Maps documentation for ",(0,s.jsx)(t.a,{href:"https://developers.google.com/maps/documentation/javascript/places-autocomplete",children:"autocomplete"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["It is exported with the name ",(0,s.jsx)(t.code,{children:"Autocomplete"}),", it is registered as ",(0,s.jsx)(t.code,{children:"GmvAutocomplete"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"autocomplete-instance",children:"Autocomplete instance"}),"\n",(0,s.jsxs)(t.p,{children:["This component save the original autocomplete object provided by Google Maps in a property called ",(0,s.jsx)(t.code,{children:"autoCompleteInstance"}),", as the example below."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"showLineNumbers",children:"// ...\nconst { Autocomplete } = (await google.maps.importLibrary(\n  'places',\n)) as google.maps.PlacesLibrary;\n\nif (typeof Autocomplete !== 'function') {\n  throw new Error(\n    \"google.maps.places.Autocomplete is undefined. Did you add 'places' to libraries when loading Google Maps?\",\n  );\n}\n\nconst autocomplete = new Autocomplete(scopedInput, autocompleteOptions);\n// ...\n"})}),"\n",(0,s.jsx)(t.h2,{id:"source-code",children:"Source code"}),"\n",(0,s.jsx)(t.p,{children:"You can see the source code on:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/diegoazh/gmap-vue/blob/2c697bb5ae78e5519d95f4873f1ab373e3d25ff9/packages/v3/src/components/autocomplete-input.vue",children:"GitHub"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/docs/vue-3-version/api/components/autocomplete#source-code",children:"Here in docs"})}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"how-to-use-it",children:"How to use it"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",metastring:"showLineNumbers",children:'<template>\n  \x3c!-- you can use the auto close form if you don\'t use the slot --\x3e\n  <gmv-autocomplete />\n  \x3c!-- <gmv-autocomplete></gmv-autocomplete> --\x3e\n\n  <gmv-map :center="center" :zoom="7" style="width: 100%; height: 500px">\n  </gmv-map>\n</template>\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",metastring:"showLineNumbers",children:'<template>\n  \x3c!-- or use it with a slot --\x3e\n  <GmvAutocomplete></GmvAutocomplete>\n  \x3c!-- <GmvAutocomplete /> --\x3e\n\n  <gmv-map :center="center" :zoom="7" style="width: 100%; height: 500px">\n  </gmv-map>\n</template>\n'})}),"\n",(0,s.jsx)(t.h2,{id:"customizing-your-text-field",children:"Customizing your text field"}),"\n",(0,s.jsxs)(t.admonition,{type:"tip",children:[(0,s.jsx)(t.p,{children:"The autocomplete supports custom text field via scoped slot"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",metastring:"showLineNumbers",children:'<gmv-autocomplete class="introInput">\n  <template v-slot:default="slotProps">\n    <v-text-field\n      outlined\n      prepend-inner-icon="place"\n      placeholder="Location Of Event"\n      ref="input"\n      v-bind:attrs="slotProps.attrs"\n    >\n    </v-text-field>\n  </template>\n</gmv-autocomplete>\n'})}),(0,s.jsx)(t.p,{children:"The ref on the element must be unique. If you create more than one autocomplete, each one should have a unique ref and it must be mentioned in the slot-ref-name prop. Like this:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",metastring:"showLineNumbers",children:'<gmv-autocomplete class="introInput">\n  <template v-slot:default="slotProps">\n    <v-text-field\n      outlined\n      prepend-inner-icon="place"\n      placeholder="Location Of Event"\n      ref="input"\n      v-bind:attrs="slotProps.attrs"\n    >\n    </v-text-field>\n  </template>\n</gmv-autocomplete>\n<gmv-autocomplete class="introInput" slot-ref-name="input2">\n  <template v-slot:default="slotProps">\n    <v-text-field\n      outlined\n      prepend-inner-icon="place"\n      placeholder="Location Of Event"\n      ref="input2"\n      v-bind:attrs="slotProps.attrs"\n    >\n    </v-text-field>\n  </template>\n</gmv-autocomplete>\n'})}),(0,s.jsx)(t.p,{children:"If the element in the slot is a vue component then it must have a child ref called input (like in vuetify text-field) or specify a custom name via the child-ref-name prop (only works one level deep into a component)."}),(0,s.jsxs)(t.p,{children:["The v-bind",":attrs"," is required."]})]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},7252:(e,t,o)=>{o.d(t,{R:()=>l,x:()=>c});var n=o(758);const s={},i=n.createContext(s);function l(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);