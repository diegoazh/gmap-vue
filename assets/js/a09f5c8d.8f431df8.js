"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7050],{1021:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"vue-2-version/guide/map","title":"map","description":"Description","source":"@site/docs/vue-2-version/guide/map.md","sourceDirName":"vue-2-version/guide","slug":"/vue-2-version/guide/map","permalink":"/gmap-vue/docs/vue-2-version/guide/map","draft":false,"unlisted":false,"editUrl":"https://github.com/diegoazh/gmap-vue/docs/vue-2-version/guide/map.md","tags":[],"version":"current","frontMatter":{},"sidebar":"vue2Version","previous":{"title":"The mapElement factory","permalink":"/gmap-vue/docs/vue-2-version/guide/map-element-factory"},"next":{"title":"marker","permalink":"/gmap-vue/docs/vue-2-version/guide/marker"}}');var i=t(6070),o=t(7252);const a={},r=void 0,c={},l=[{value:"Description",id:"description",level:2},{value:"Variables",id:"variables",level:2},{value:"Source code",id:"source-code",level:2},{value:"Some tricky parts",id:"some-tricky-parts",level:3},{value:"<code>getBounds</code>",id:"getbounds",level:4},{value:"<code>PlacesService</code>",id:"placesservice",level:4},{value:"How to use it",id:"how-to-use-it",level:2},{value:"HTML examples",id:"html-examples",level:2},{value:"Test the component",id:"test-the-component",level:2}];function p(n){const e={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(e.p,{children:"This component helps you to create a Google Map."}),"\n",(0,i.jsxs)(e.p,{children:["For more information read the Google Maps documentation\nfor ",(0,i.jsx)(e.a,{href:"https://developers.google.com/maps/documentation/javascript/basics",children:"map"}),"."]}),"\n",(0,i.jsxs)(e.p,{children:["It is exported with the name ",(0,i.jsx)(e.code,{children:"GmapMap"}),"."]}),"\n",(0,i.jsx)(e.h2,{id:"variables",children:"Variables"}),"\n",(0,i.jsxs)(e.p,{children:["This component save the original map object instance provided by Google Maps in a property called ",(0,i.jsx)(e.code,{children:"$mapObject"}),", as the\nexample below."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"  this.$mapObject = new google.maps.Map(element, options);;\n"})}),"\n",(0,i.jsx)(e.h2,{id:"source-code",children:"Source code"}),"\n",(0,i.jsxs)(e.admonition,{type:"note",children:[(0,i.jsxs)(e.mdxAdmonitionTitle,{children:["Click to se the source code of ",(0,i.jsx)("code",{children:"map.vue"})," component"]}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:"<template>\n  <div class=\"vue-map-container\">\n    <div ref=\"vue-map\" class=\"vue-map\"></div>\n    <div class=\"vue-map-hidden\">\n      <slot></slot>\n    </div>\n    <slot name=\"visible\"></slot>\n  </div>\n</template>\n\n<script>\nimport mountableMixin from '../mixins/mountable';\nimport {\n  bindEvents,\n  bindProps,\n  getPropsValues,\n  twoWayBindingWrapper,\n  watchPrimitiveProperties,\n} from '../utils/helpers';\nimport { mapMappedProps } from '../utils/mapped-props-by-map-element';\n\nexport default {\n  mixins: [mountableMixin],\n  props: {\n    center: {\n      type: Object,\n      required: true,\n    },\n    zoom: {\n      type: Number,\n      required: false,\n    },\n    heading: {\n      type: Number,\n    },\n    mapTypeId: {\n      type: String,\n    },\n    tilt: {\n      type: Number,\n    },\n    options: {\n      type: Object,\n      default: undefined,\n    },\n  },\n  data() {\n    return {\n      recyclePrefix: '__gmc__',\n    };\n  },\n  provide() {\n    this.$mapPromise = new Promise((resolve, reject) => {\n      this.$mapPromise = { resolve, reject };\n    });\n\n    return {\n      $mapPromise: this.$mapPromise,\n    };\n  },\n  computed: {\n    finalLat() {\n      return this.center && typeof this.center.lat === 'function'\n        ? this.center.lat()\n        : this.center.lat;\n    },\n    finalLng() {\n      return this.center && typeof this.center.lng === 'function'\n        ? this.center.lng()\n        : this.center.lng;\n    },\n    finalLatLng() {\n      return { lat: this.finalLat, lng: this.finalLng };\n    },\n  },\n  watch: {\n    zoom(zoom) {\n      if (this.$mapObject) {\n        this.$mapObject.setZoom(zoom);\n      }\n    },\n  },\n  beforeDestroy() {\n    const recycleKey = this.getRecycleKey();\n    if (window[recycleKey]) {\n      window[recycleKey].div = this.$mapObject.getDiv();\n    }\n  },\n  mounted() {\n    return this.$gmapApiPromiseLazy()\n      .then(() => {\n        const events = [\n          'bounds_changed',\n          'click',\n          'dblclick',\n          'drag',\n          'dragend',\n          'dragstart',\n          'idle',\n          'mousemove',\n          'mouseout',\n          'mouseover',\n          'resize',\n          'rightclick',\n          'tilesloaded',\n        ];\n\n        // getting the DOM element where to create the map\n        const element = this.$refs['vue-map'];\n\n        // creating the map\n        const initialOptions = {\n          ...this.options,\n          ...getPropsValues(this, mapMappedProps),\n        };\n\n        // don't use delete keyword in order to create a more predictable code for the engine\n        const { options: extraOptions, ...finalOptions } = initialOptions;\n        const options = finalOptions;\n\n        const recycleKey = this.getRecycleKey();\n        if (this.options.recycle && window[recycleKey]) {\n          element.appendChild(window[recycleKey].div);\n          this.$mapObject = window[recycleKey].map;\n          this.$mapObject.setOptions(options);\n        } else {\n          // console.warn('[gmap-vue] New google map created')\n          this.$mapObject = new google.maps.Map(element, options);\n          window[recycleKey] = { map: this.$mapObject };\n        }\n\n        // binding properties (two and one way)\n        bindProps(this, this.$mapObject, mapMappedProps);\n        // binding events\n        bindEvents(this, this.$mapObject, events);\n\n        // manually trigger center and zoom\n        twoWayBindingWrapper((increment, decrement, shouldUpdate) => {\n          this.$mapObject.addListener('center_changed', () => {\n            if (shouldUpdate()) {\n              this.$emit('center_changed', this.$mapObject.getCenter());\n            }\n            decrement();\n          });\n\n          const updateCenter = () => {\n            increment();\n            this.$mapObject.setCenter(this.finalLatLng);\n          };\n\n          watchPrimitiveProperties(\n            this,\n            ['finalLat', 'finalLng'],\n            updateCenter\n          );\n        });\n        this.$mapObject.addListener('zoom_changed', () => {\n          this.$emit('zoom_changed', this.$mapObject.getZoom());\n        });\n        this.$mapObject.addListener('bounds_changed', () => {\n          this.$emit('bounds_changed', this.$mapObject.getBounds());\n        });\n\n        this.$mapPromise.resolve(this.$mapObject);\n\n        return this.$mapObject;\n      })\n      .catch((error) => {\n        throw error;\n      });\n  },\n  methods: {\n    resize() {\n      if (this.$mapObject) {\n        google.maps.event.trigger(this.$mapObject, 'resize');\n      }\n    },\n    resizePreserveCenter() {\n      if (!this.$mapObject) {\n        return;\n      }\n\n      const oldCenter = this.$mapObject.getCenter();\n      google.maps.event.trigger(this.$mapObject, 'resize');\n      this.$mapObject.setCenter(oldCenter);\n    },\n\n    /// Override mountableMixin::_resizeCallback\n    /// because resizePreserveCenter is usually the\n    /// expected behaviour\n    // eslint-disable-next-line no-underscore-dangle -- old code\n    _resizeCallback() {\n      this.resizePreserveCenter();\n    },\n    panBy(...args) {\n      if (this.$mapObject) {\n        this.$mapObject.panBy(...args);\n      }\n    },\n    panTo(...args) {\n      if (this.$mapObject) {\n        this.$mapObject.panTo(...args);\n      }\n    },\n    panToBounds(...args) {\n      if (this.$mapObject) {\n        this.$mapObject.panToBounds(...args);\n      }\n    },\n    fitBounds(...args) {\n      if (this.$mapObject) {\n        this.$mapObject.fitBounds(...args);\n      }\n    },\n    getRecycleKey() {\n      return this?.options?.recycle\n        ? this.recyclePrefix + this.options.recycle\n        : this.recyclePrefix;\n    },\n  },\n};\n<\/script>\n\n<style lang=\"css\">\n.vue-map-container {\n  position: relative;\n}\n\n.vue-map-container .vue-map {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: absolute;\n}\n.vue-map-hidden {\n  display: none;\n}\n</style>\n\n"})})]}),"\n",(0,i.jsxs)(e.p,{children:["If you need to know what are ",(0,i.jsx)(e.code,{children:"mappedProps"})," please read the general concepts of this\napplication ",(0,i.jsx)(e.a,{href:"/code/utils/mapped-props-by-map-element.html#autocompletemappedprops",children:"here"}),"."]}),"\n",(0,i.jsxs)(e.admonition,{type:"note",children:[(0,i.jsxs)(e.mdxAdmonitionTitle,{children:["Mapped Props of ",(0,i.jsx)("code",{children:"GmapMap"})," component"]}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"export const mapMappedProps = {\n  center: {\n    required: true,\n    twoWay: true,\n    type: Object,\n    noBind: true,\n  },\n  zoom: {\n    required: false,\n    twoWay: true,\n    type: Number,\n    noBind: true,\n  },\n  heading: {\n    type: Number,\n    twoWay: true,\n  },\n  mapTypeId: {\n    twoWay: true,\n    type: String,\n  },\n  tilt: {\n    twoWay: true,\n    type: Number,\n  },\n  options: {\n    type: Object,\n    default() {\n      return {};\n    },\n  },\n};\n"})})]}),"\n",(0,i.jsxs)(e.admonition,{type:"note",children:[(0,i.jsxs)(e.mdxAdmonitionTitle,{children:["Events bound with to way on ",(0,i.jsx)("code",{children:"GmapMap"})]}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const events = [\n  'bounds_changed',\n  'click',\n  'dblclick',\n  'drag',\n  'dragend',\n  'dragstart',\n  'idle',\n  'mousemove',\n  'mouseout',\n  'mouseover',\n  'resize',\n  'rightclick',\n  'tilesloaded',\n];\n"})})]}),"\n",(0,i.jsx)(e.h3,{id:"some-tricky-parts",children:"Some tricky parts"}),"\n",(0,i.jsx)(e.h4,{id:"getbounds",children:(0,i.jsx)(e.code,{children:"getBounds"})}),"\n",(0,i.jsxs)(e.p,{children:["If you need to use the ",(0,i.jsx)(e.code,{children:"getBounds"})," method of the ",(0,i.jsx)(e.code,{children:"$mapObject"})," you can do it with a reference as in the below example,\nbut if you use the ",(0,i.jsx)(e.code,{children:"getBounds"})," method in the mounted hook you need to take care about three things:"]}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"the center should be defined"}),"\n",(0,i.jsx)(e.li,{children:"the zoom should be defined"}),"\n",(0,i.jsx)(e.li,{children:"the map should be visible"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["In the ",(0,i.jsx)(e.a,{href:"https://developers.google.com/maps/documentation/javascript/reference/map#Map.getBounds",children:"official documentation"}),"\nit says:"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"If the map is not yet initialized or center and zoom have not been set then the result is undefined."}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["Because of that behaviour you must listen for the ",(0,i.jsx)(e.code,{children:"tilesloaded"})," event in the map component, this event is fired when the\nmaps is visible and allows you to accomplish with the three requirements mentioned above."]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["You can refer to the ",(0,i.jsx)(e.a,{href:"https://github.com/diegoazh/gmap-vue/issues/67",children:"issue #67"})]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:"<template>\n  <div>\n    <GmapMap\n      @tilesloaded=\"tilesloadedEvent\"\n      :center=\"center\"\n      :zoom=\"11\"\n      style=\"width: 100%; height: 500px\"\n      ref=\"gmap\">\n        ....\n    </GmapMap>\n  </div>\n</template>\n\n<script>\nexport default {\n  // ...\n  async mounted() {\n    // this is a good practice\n    await this.$gmapApiPromiseLazy();\n\n    // you can do the same in the following way but is more verbose\n    // this.$refs.gmap.$mapObject.addListener('tilesloaded', () => {\n    //   console.log('>>>>>>>>>> getCenter', this.$refs.gmap.$mapObject.getCenter())\n    //   console.log('>>>>>>>>>> getZoom', this.$refs.gmap.$mapObject.getZoom())\n    //   console.log('>>>>>>>>>> getBounds', this.$refs.gmap.$mapObject.getBounds())\n    // });\n  },\n  methods: {\n    tilesloadedEvent() {\n      console.log('>>>>>>>>>> getCenter', this.$refs.gmap.$mapObject.getCenter())\n      console.log('>>>>>>>>>> getZoom', this.$refs.gmap.$mapObject.getZoom())\n      console.log('>>>>>>>>>> getBounds', this.$refs.gmap.$mapObject.getBounds())\n    }\n  }\n};\n<\/script>\n"})}),"\n",(0,i.jsx)(e.h4,{id:"placesservice",children:(0,i.jsx)(e.code,{children:"PlacesService"})}),"\n",(0,i.jsxs)(e.p,{children:["If want to use the ",(0,i.jsx)(e.code,{children:"google.maps.places.PlacesService"})," class we let you here an example about how to implement it."]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["You can refer to the ",(0,i.jsx)(e.a,{href:"https://github.com/diegoazh/gmap-vue/issues/130",children:"issue #130"})]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:'<template>\n  <div>\n    <GmapMap\n      :center="center"\n      :zoom="zoom"\n      style="width: 100%; height: 500px"\n      ref="googleMap"\n    >\n    </GmapMap>\n  </div>\n</template>\n\n<script>\nimport { getGoogleMapsAPI } from "gmap-vue";\n\nexport default {\n  data() {\n    return {\n      center: { lat: 10, lng: 10 },\n      zoom: 11,\n    };\n  },\n  async mounted() {\n    await this.$gmapApiPromiseLazy();\n\n    const google = getGoogleMapsAPI();\n    console.log(">>>>>>>>>>>> placesService", google.maps.places);\n    console.log(">>>>>>>>>>>> $mapObject", this.$refs.googleMap.$mapObject);\n\n    const service = new google.maps.places.PlacesService(\n      document.createElement("div") // if you pass the map object here it doesn\'t work\n    );\n\n    console.log("service", service);\n\n    const request = {\n      query: "Museum of Contemporary Art Australia",\n      fields: ["name", "geometry"],\n    };\n\n    const self = this;\n    service.findPlaceFromQuery(request, function (results, status) {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          console.log(results[i]);\n        }\n        self.$refs.googleMap.$mapObject.setCenter(results[0].geometry.location);\n      }\n    });\n  },\n};\n<\/script>\n'})}),"\n",(0,i.jsx)(e.h2,{id:"how-to-use-it",children:"How to use it"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:'<template>\n  <gmap-map\n    :center="center"\n    :zoom="7"\n    ref="mmm"\n    style="width: 100%; height: 500px;"\n  >\n  </gmap-map>\n</template>\n'})}),"\n",(0,i.jsxs)(e.p,{children:["If you need to know the ",(0,i.jsx)(e.strong,{children:"API of this component"})," please read it ",(0,i.jsx)(e.a,{href:"/code/components/map-layer.html",children:"here"}),"."]}),"\n",(0,i.jsx)(e.h2,{id:"html-examples",children:"HTML examples"}),"\n",(0,i.jsx)(e.admonition,{title:"HTML example with center twoway",type:"note",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:'<head>\n  <meta charset="utf-8" />\n  <style>\n  .map-container {\n    width: 400px;\n    height: 400px;\n    display: inline-block;\n  }\n  .flex-container {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n  }\n  </style>\n</head>\n<body>\n  <script>\n  var tests = [];\n\n  <\/script>\n\n  <div id="test1">\n    <h2>Test 1</h2>\n    <ol>\n      <li>You can pan around this map, and the center is updated.</li>\n      <li>When you edit the lat/lng the map center is updated</li>\n    </ol>\n\n    <div>\n      <small><strong>Lat:</strong></small>\n      <input type="number"\n        v-model.number.lazy="reportedMapCenter.lat"\n        @change="sync"\n        step="0.00001" />\n      &nbsp;\n      <small><strong>Lng:</strong></small>\n      <input type="number"\n        v-model.number.lazy="reportedMapCenter.lng"\n        @change="sync"\n        step="0.00001" />\n    </div>\n    <br>\n\n    <div class="flex-container">\n      <div>\n        <gmap-map :center="mapCenter" :zoom="12"\n          ref="map"\n          @center_changed="updateCenter"\n          @idle="sync"\n          class="map-container">\n        </gmap-map>\n      </div>\n      <div>\n        <gmap-street-view-panorama\n          :position="mapCenter"\n          ref="pano"\n          @position_changed="updateCenter"\n          :pov="pov"\n          class="map-container">\n        </gmap-street-view-panorama>\n      </div>\n    </div>\n  </div>\n\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.11/vue.js"><\/script>\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.16.4/lodash.js"><\/script>\n  <script src="https://cdn.jsdelivr.net/npm/gmap-vue@1.2.2/dist/gmap-vue.min.js"><\/script>\n\n  <script>\n    Vue.use(GmapVue, {\n      load: {\n        key: \'AIzaSyDf43lPdwlF98RCBsJOFNKOkoEjkwxb5Sc\',\n      }\n    });\n\n    document.addEventListener(\'DOMContentLoaded\', function() {\n      new Vue({\n        el: \'#test1\',\n        data: {\n          reportedMapCenter: {\n            lat: 1.32,\n            lng: 103.8\n          },\n          mapCenter: null,\n          pov: {\n            pitch: 0,\n            heading: 0,\n          },\n        },\n        created () {\n          this.sync()\n        },\n        methods: {\n          updateCenter(latLng) {\n            this.reportedMapCenter = {\n              lat: latLng.lat(),\n              lng: latLng.lng(),\n            }\n          },\n          sync () {\n            this.mapCenter = this.reportedMapCenter\n          }\n        }\n      });\n    });\n  <\/script>\n</body>\n'})})}),"\n",(0,i.jsx)(e.admonition,{title:"HTML example with center",type:"note",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:'<head>\n  <style>\n    .map-container {\n      width: 400px;\n      height: 400px;\n    }\n    .flex-test3-container {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-around;\n    }\n    .flex-test3-container > div {\n      display: flex;\n      flex-direction: row;\n    }\n    .flex-test3-container > div > small {\n      margin-right: .3rem;\n      font-size: 16px;\n      font-weight: bolder;\n    }\n  </style>\n</head>\n<body>\n  <script>\n    var tests = [];\n  <\/script>\n\n  <div id="test1">\n    <h2>Test 1</h2>\n    <small><strong>Passes if:</strong> You can pan around this map without it being snapped back to the center</small>\n    <br><br>\n    <gmap-map :center="{lat: 1.38, lng: 103.8}" :zoom="12"\n      class="map-container">\n    </gmap-map>\n  </div>\n  <script>\n    tests.push(() => {\n      new Vue({\n        el: \'#test1\',\n      });\n    });\n  <\/script>\n\n  <div id="test2">\n    <h2>Test 2</h2>\n    <small><strong>Passes if:</strong> Clicking the button changes the center</small>\n    <br>\n    <button @click="changeCenter">Change Center</button>&nbsp;\n    <button @click="changeZoom">Change Zoom</button>\n    <br><br>\n    <gmap-map :center="changingCenter" :zoom="changingZoom" class="map-container">\n    </gmap-map>\n  </div>\n  <script>\n    tests.push(() => {\n      new Vue({\n        el: \'#test2\',\n        data: {\n          changingZoom: 12,\n          changingCenter: {lat: 1.38, lng: 103.8},\n        },\n        methods: {\n          changeCenter() {\n            this.changingCenter = {\n              lat: 1.38 + Math.random() * 0.3,\n              lng: 103.8 + Math.random() * 0.1\n            };\n          },\n          changeZoom() {\n            this.changingZoom = Math.floor(5 + Math.random() * 10);\n          },\n        }\n      });\n    });\n  <\/script>\n\n  <div id="test3">\n    <h2>Test 3</h2>\n    <small><strong>Passes if:</strong> Resize of (1) is artefact-free.</small>\n    <br>\n    <small><strong>Passes if:</strong> Resize of (2) preserves the center</small>\n    <br>\n    <button @click="changeSize">Change Size</button>\n    <br><br>\n\n    <div class="flex-test3-container">\n      <div>\n        <small><strong>1</strong></small>\n        <gmap-map :center="changingCenter" :zoom="changingZoom" ref="resizeMap1"\n        :style="changingSize" class="map-container">\n        </gmap-map>\n      </div>\n      <div>\n        <small><strong>2</strong></small>\n        <gmap-map :center="changingCenter" :zoom="changingZoom" ref="resizeMap2"\n        :style="changingSize" class="map-container">\n        </gmap-map>\n      </div>\n    </div>\n  </div>\n  <script>\n    tests.push(() => new Vue({\n      el: \'#test3\',\n      data: {\n        changingZoom: 12,\n        changingCenter: {lat:1.38, lng:103.8},\n        changingWidth: 200,\n        changingHeight: 200,\n        i: 0,\n      },\n      computed: {\n        changingSize() {\n          return {\n            width: this.changingWidth + \'px\',\n            height: this.changingHeight + \'px\',\n          };\n        }\n      },\n      methods: {\n        changeCenter() {\n          this.changingCenter = {\n            lat: 1.38 + Math.random() * 0.3,\n            lng: 103.8 + Math.random() * 0.1\n          };\n        },\n        changeZoom() {\n          this.changingZoom = Math.floor(5 + Math.random() * 10);\n        },\n        changeSize() {\n          this.i = (this.i + 1) % 2;\n          this.changingWidth = 200 + this.i * 300;\n          this.changingHeight = 200 + Math.random() * 150;\n          this.$nextTick(() => {\n            this.$refs.resizeMap1.resize();\n            this.$refs.resizeMap2.resizePreserveCenter();\n          });\n        }\n      }\n    }));\n  <\/script>\n\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.11/vue.js"><\/script>\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.16.4/lodash.js"><\/script>\n  <script src="https://cdn.jsdelivr.net/npm/gmap-vue@1.2.2/dist/gmap-vue.min.js"><\/script>\n\n  <script>\n    Vue.use(GmapVue, {\n      load: {\n        key: \'AIzaSyDf43lPdwlF98RCBsJOFNKOkoEjkwxb5Sc\',\n      }\n    });\n\n    document.addEventListener(\'DOMContentLoaded\', function() {\n      Vue.component(\'gmap-map\', GmapVue.Map);\n\n      for (let test of tests) {\n        test();\n      }\n    });\n  <\/script>\n</body>\n'})})}),"\n",(0,i.jsx)(e.admonition,{title:"HTML example with destroy",type:"note",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:'<body>\n  <div id="root">\n    <h1>Resize Bus</h1>\n\n    <p>\n      There should be no error toggling the visibility of the maps\n      <button @click=updateStyle>\n        Toggle Visibility\n      </button>\n    </p>\n\n    <div v-if="showElements">\n      <gmap-map\n        :style="currentStyle"\n        :center="{lat: 1.38, lng: 103.8}"\n        :zoom=12>\n      </gmap-map>\n\n      <gmap-map\n        :style="currentStyle"\n        :center="{lat: 1.38, lng: 103.8}"\n        :zoom=12>\n      </gmap-map>\n\n      <gmap-map\n        :style="currentStyle"\n        :center="{lat: 1.38, lng: 103.8}"\n        :zoom=12\n        :resize-bus="customBus">\n      </gmap-map>\n    </div>\n  </div>\n\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.11/vue.js"><\/script>\n  <script src="https://cdn.jsdelivr.net/npm/gmap-vue@1.2.2/dist/gmap-vue.min.js"><\/script>\n\n  <script>\n    Vue.use(GmapVue, {\n      load: {\n        key: \'AIzaSyDf43lPdwlF98RCBsJOFNKOkoEjkwxb5Sc\',\n      },\n    });\n\n    document.addEventListener(\'DOMContentLoaded\', function() {\n      new Vue({\n        el: \'#root\',\n        data: {\n          currentStyle: {\n            display: \'inline-block\',\n            width: \'200px\',\n            height: \'200px\',\n          },\n          showElements: true,\n          customBus: new Vue(),\n        },\n        methods: {\n          updateStyle() {\n            this.showElements = !this.showElements;\n            Vue.$gmapDefaultResizeBus.$emit(\'resize\');\n          },\n          updateBus() {\n            this.customBus.$emit(\'resize\');\n          }\n        }\n      });\n    });\n  <\/script>\n</body>\n'})})}),"\n",(0,i.jsx)(e.admonition,{title:"HTML example of map functions",type:"note",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:'<body>\n  <div id="root">\n    <button @click="panTo">\n      Pan To\n    </button>\n\n    <button @click="panToBounds">\n      Pan To Bounds\n    </button>\n\n    <button @click="fitBounds">\n      Fit Bounds\n    </button>\n\n    <gmap-map :center="center" :zoom="7" ref="mmm" style="width: 100%; height: 500px">\n      <gmap-marker :key="index" v-for="(m, index) in markers" :position="m.position" :clickable="true" :draggable="true" @click="center=m.position"></gmap-marker>\n    </gmap-map>\n  </div>\n\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.11/vue.js"><\/script>\n  <script src="https://cdn.jsdelivr.net/npm/gmap-vue@1.2.2/dist/gmap-vue.min.js"><\/script>\n\n  <script>\n    Vue.use(GmapVue, {\n      load: {\n        key: \'AIzaSyDf43lPdwlF98RCBsJOFNKOkoEjkwxb5Sc\'\n      },\n    });\n\n    document.addEventListener(\'DOMContentLoaded\', function() {\n      new Vue({\n        el: \'#root\',\n        data: {\n          center: {\n            lat: 10.0,\n            lng: 10.0\n          },\n          markers: [{\n            position: {\n              lat: 10.0,\n              lng: 10.0\n            }\n          }, {\n            position: {\n              lat: 11.0,\n              lng: 11.0\n            }\n          }]\n        },\n\n        methods: {\n          fitBounds() {\n            var b = new google.maps.LatLngBounds();\n\n            b.extend({\n              lat: 33.972,\n              lng: 35.4054\n            });\n            b.extend({\n              lat: 33.7606,\n              lng: 35.64592\n            });\n\n            this.$refs.mmm.fitBounds(b);\n          },\n          panToBounds() {\n            var b = new google.maps.LatLngBounds();\n\n            b.extend({\n              lat: 33.972,\n              lng: 35.4054\n            });\n            b.extend({\n              lat: 33.7606,\n              lng: 35.64592\n            });\n\n            this.$refs.mmm.panToBounds(b);\n          },\n          panTo() {\n            this.$refs.mmm.panTo({\n              lat: 47.912867,\n              lng: 106.910723\n            });\n          },\n        }\n      });\n    });\n  <\/script>\n</body>\n'})})}),"\n",(0,i.jsx)(e.admonition,{title:"HTML example of map type id",type:"note",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:'<body>\n  <div id="root">\n    <p>Map type id <strong>{{mapTypeId}}</strong></p>\n\n    <gmap-map :center="center" :zoom="15" style="width: 100%; height: 500px"\n        @maptypeid_changed="updateMapType"\n        :map-type-id="mapTypeId">\n    </gmap-map>\n  </div>\n\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.11/vue.js"><\/script>\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.js"><\/script>\n  <script src="https://cdn.jsdelivr.net/npm/gmap-vue@1.2.2/dist/gmap-vue.min.js"><\/script>\n\n  <script>\n    Vue.use(GmapVue, {\n      load: {\n        key: \'AIzaSyDf43lPdwlF98RCBsJOFNKOkoEjkwxb5Sc\'\n      },\n    });\n\n    document.addEventListener(\'DOMContentLoaded\', function() {\n      new Vue({\n        el: \'#root\',\n        data: {\n          center: {\n            lat: 47.376332,\n            lng: 8.547511\n          },\n          mapTypeId: "terrain",\n        },\n        methods: {\n          updateMapType: function(type) {\n            this.mapTypeId = type\n          }\n        }\n      });\n    });\n  <\/script>\n</body>\n'})})}),"\n",(0,i.jsx)(e.h2,{id:"test-the-component",children:"Test the component"}),"\n",(0,i.jsx)(e.admonition,{title:"Click to see the HTML example with center two-way in action",type:"note",children:(0,i.jsx)("eg-base",{children:(0,i.jsx)("eg-map-center-twoway",{})})}),"\n",(0,i.jsx)(e.admonition,{title:"Click to see the HTML example with center in action",type:"note",children:(0,i.jsx)("eg-base",{children:(0,i.jsx)("eg-map-center",{})})}),"\n",(0,i.jsx)(e.admonition,{title:"Click to see the HTML example with destroy in action",type:"note",children:(0,i.jsx)("eg-base",{children:(0,i.jsx)("eg-map-destroy",{})})}),"\n",(0,i.jsx)(e.admonition,{title:"Click to see the HTML example of map functions in action",type:"note",children:(0,i.jsx)("eg-base",{children:(0,i.jsx)("eg-map-functions",{})})}),"\n",(0,i.jsx)(e.admonition,{title:"Click to see the HTML example of map type id in action",type:"note",children:(0,i.jsx)("eg-base",{children:(0,i.jsx)("eg-map-type-id",{})})})]})}function d(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(p,{...n})}):p(n)}},7252:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>r});var s=t(758);const i={},o=s.createContext(i);function a(n){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),s.createElement(o.Provider,{value:e},n.children)}}}]);