"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4003],{3389:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"vue-2-version/guide/street-view-panorama","title":"street-view-panorama","description":"Description","source":"@site/docs/vue-2-version/guide/street-view-panorama.md","sourceDirName":"vue-2-version/guide","slug":"/vue-2-version/guide/street-view-panorama","permalink":"/gmap-vue/docs/vue-2-version/guide/street-view-panorama","draft":false,"unlisted":false,"editUrl":"https://github.com/diegoazh/gmap-vue/docs/vue-2-version/guide/street-view-panorama.md","tags":[],"version":"current","frontMatter":{},"sidebar":"vue2Version","previous":{"title":"rectangle","permalink":"/gmap-vue/docs/vue-2-version/guide/rectangle"},"next":{"title":"API","permalink":"/gmap-vue/docs/category/api"}}');var i=t(6070),a=t(7252);const s={},r=void 0,p={},c=[{value:"Description",id:"description",level:2},{value:"Variables",id:"variables",level:2},{value:"Source code",id:"source-code",level:2},{value:"How to use it",id:"how-to-use-it",level:2},{value:"HTML examples",id:"html-examples",level:2},{value:"Test the component",id:"test-the-component",level:2}];function l(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(e.p,{children:"This component helps you to create a street view panorama on Google Maps API."}),"\n",(0,i.jsxs)(e.p,{children:["For more information read the Google Maps documentation\nfor ",(0,i.jsx)(e.a,{href:"https://developers.google.com/maps/documentation/javascript/streetview",children:"street view panorama"}),"."]}),"\n",(0,i.jsxs)(e.p,{children:["It is exported with the name ",(0,i.jsx)(e.code,{children:"GmapStreetViewPanorama"}),"."]}),"\n",(0,i.jsx)(e.h2,{id:"variables",children:"Variables"}),"\n",(0,i.jsxs)(e.p,{children:["This component save the original street view panorama object provided by Google Maps in a property called ",(0,i.jsx)(e.code,{children:"$panoObject"}),",\nas the example below."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"this.$panoObject = new google.maps.StreetViewPanorama(element, options);\n"})}),"\n",(0,i.jsx)(e.h2,{id:"source-code",children:"Source code"}),"\n",(0,i.jsxs)(e.admonition,{type:"note",children:[(0,i.jsxs)(e.mdxAdmonitionTitle,{children:["Click to se the source code of ",(0,i.jsx)("code",{children:"street-view-panorama.vue"})," component"]}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:"<template>\n  <div class=\"vue-street-view-pano-container\">\n    <div ref=\"vue-street-view-pano\" class=\"vue-street-view-pano\"></div>\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nimport MountableMixin from '../mixins/mountable';\nimport {\n  bindEvents,\n  bindProps,\n  getPropsValues,\n  twoWayBindingWrapper,\n  watchPrimitiveProperties,\n} from '../utils/helpers';\nimport { streetViewPanoramaMappedProps } from '../utils/mapped-props-by-map-element';\n\nexport default {\n  mixins: [MountableMixin],\n  props: {\n    zoom: {\n      type: Number,\n    },\n    pov: {\n      type: Object,\n    },\n    position: {\n      type: Object,\n    },\n    pano: {\n      type: String,\n    },\n    motionTracking: {\n      type: Boolean,\n    },\n    visible: {\n      type: Boolean,\n      default: true,\n    },\n    options: {\n      type: Object,\n      default: undefined,\n    },\n  },\n  replace: false,\n  computed: {\n    finalLat() {\n      return this.position && typeof this.position.lat === 'function'\n        ? this.position.lat()\n        : this.position.lat;\n    },\n    finalLng() {\n      return this.position && typeof this.position.lng === 'function'\n        ? this.position.lng()\n        : this.position.lng;\n    },\n    finalLatLng() {\n      return {\n        lat: this.finalLat,\n        lng: this.finalLng,\n      };\n    },\n  },\n  watch: {\n    zoom(zoom) {\n      if (this.$panoObject) {\n        this.$panoObject.setZoom(zoom);\n      }\n    },\n  },\n  methods: {\n    resize() {\n      if (this.$panoObject) {\n        google.maps.event.trigger(this.$panoObject, 'resize');\n      }\n    },\n  },\n  mounted() {\n    const events = ['closeclick', 'status_changed'];\n\n    return this.$gmapApiPromiseLazy()\n      .then(() => {\n        const element = this.$refs['vue-street-view-pano'];\n\n        const options = {\n          ...this.options,\n          ...getPropsValues(this, streetViewPanoramaMappedProps),\n        };\n        delete options.options;\n\n        this.$panoObject = new google.maps.StreetViewPanorama(element, options);\n\n        bindProps(this, this.$panoObject, streetViewPanoramaMappedProps);\n        bindEvents(this, this.$panoObject, events);\n\n        twoWayBindingWrapper((increment, decrement, shouldUpdate) => {\n          increment();\n\n          this.$panoObject.addListener('position_changed', () => {\n            if (shouldUpdate()) {\n              this.$emit('position_changed', this.$panoObject.getPosition());\n            }\n            decrement();\n          });\n\n          const updateCenter = () => {\n            increment();\n            this.$panoObject.setPosition(this.finalLatLng);\n          };\n\n          watchPrimitiveProperties(\n            this,\n            ['finalLat', 'finalLng'],\n            updateCenter\n          );\n        });\n\n        this.$panoPromiseDeferred.resolve(this.$panoObject);\n\n        return this.$panoPromise;\n      })\n      .catch((error) => {\n        throw error;\n      });\n  },\n  provide() {\n    const promise = new Promise((resolve, reject) => {\n      this.$panoPromiseDeferred = { resolve, reject };\n    });\n    return {\n      $panoPromise: promise,\n      $mapPromise: promise,\n    };\n  },\n};\n<\/script>\n\n<style lang=\"css\">\n.vue-street-view-pano-container {\n  position: relative;\n}\n\n.vue-street-view-pano-container .vue-street-view-pano {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: absolute;\n}\n</style>\n"})})]}),"\n",(0,i.jsxs)(e.p,{children:["If you need to know what are ",(0,i.jsx)(e.code,{children:"mappedProps"})," please read the general concepts of this\napplication ",(0,i.jsx)(e.a,{href:"/code/utils/mapped-props-by-map-element.html#autocompletemappedprops",children:"here"}),"."]}),"\n",(0,i.jsxs)(e.admonition,{type:"note",children:[(0,i.jsxs)(e.mdxAdmonitionTitle,{children:["Events bound with to way on ",(0,i.jsx)("code",{children:"GmapPolyline"})]}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const events = ['closeclick', 'status_changed'];\n"})})]}),"\n",(0,i.jsx)(e.h2,{id:"how-to-use-it",children:"How to use it"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:'<template>\n  <div class="flex-container">\n    <div>\n      <gmap-map :center="mapCenter" :zoom="12"\n        ref="map"\n        @center_changed="updateCenter"\n        @idle="sync"\n        class="map-container">\n      </gmap-map>\n    </div>\n    <div>\n      <gmap-street-view-panorama\n        ref="pano"\n        :position="mapCenter"\n        :pov="pov"\n        :zoom="1"\n        class="map-container"\n        @position_changed="updateCenter"\n        @pano_changed="updatePano"\n        @pov_changed="updatePov">\n      </gmap-street-view-panorama>\n    </div>\n  </div>\n</template>\n'})}),"\n",(0,i.jsxs)(e.p,{children:["If you need to know the ",(0,i.jsx)(e.strong,{children:"API of this component"})," please read it ",(0,i.jsx)(e.a,{href:"/code/components/street-view-panorama.html",children:"here"}),"."]}),"\n",(0,i.jsx)(e.h2,{id:"html-examples",children:"HTML examples"}),"\n",(0,i.jsx)(e.admonition,{title:"Street view panorama",type:"note",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:'<head>\n  <style>\n    .map-container {\n      width: 400px;\n      height: 400px;\n      display: inline-block;\n    }\n    .flex-container {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-around;\n    }\n  </style>\n</head>\n<body>\n  <div id="root">\n    <h3>Panorama at Pembroke College, Cambridge, facing North, looking slightly upwards (10 degrees)</h3>\n    <p>Point-of-view updates when you pan around</p>\n    <ul>\n      <li><strong>Heading:</strong> <i>{{pov && pov.heading}}</i> <button @click="pov.heading = Math.random() * 360">Change</button></li>\n      <li><strong>Pitch:</strong> <i>{{pov && pov.pitch}}</i> <button @click="pov.pitch = Math.random() * 180 - 90">Change</button></li>\n      <li> <strong>Change booth:</strong> <button @click="pov.pitch = Math.random() * 180 - 90, pov.heading = Math.random() * 360">Change Both</button></li>\n      <li><strong>Pano ID:</strong> <i>{{pano}}</i></li>\n    </ul>\n    <br><br>\n    <div class="flex-container">\n      <div>\n        <gmap-map :center="mapCenter" :zoom="12"\n          ref="map"\n          @center_changed="updateCenter"\n          @idle="sync"\n          class="map-container">\n        </gmap-map>\n      </div>\n      <div>\n        <gmap-street-view-panorama\n          ref="pano"\n          :position="mapCenter"\n          :pov="pov"\n          :zoom="1"\n          class="map-container"\n          @position_changed="updateCenter"\n          @pano_changed="updatePano"\n          @pov_changed="updatePov">\n        </gmap-street-view-panorama>\n      </div>\n    </div>\n  </div>\n\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.11/vue.js"><\/script>\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.16.4/lodash.js"><\/script>\n  <script src="https://cdn.jsdelivr.net/npm/gmap-vue@1.2.2/dist/gmap-vue.min.js"><\/script>\n\n  <script>\n    Vue.use(GmapVue, {\n      load: {\n        key: \'AIzaSyDf43lPdwlF98RCBsJOFNKOkoEjkwxb5Sc\',\n        libraries: \'places\'\n      },\n      // Demonstrating how we can customize the name of the components\n      installComponents: true,\n    });\n\n    document.addEventListener(\'DOMContentLoaded\', function() {\n      new Vue({\n        el: \'#root\',\n        data: {\n          reportedMapCenter: {\n            lat: 52.201272,\n            lng: 0.118720\n          },\n          mapCenter: null,\n          pov: {\n            heading: 0,\n            pitch: 0,\n          },\n          pano: 0,\n        },\n        methods: {\n          updatePov(pov) {\n            this.pov = pov;\n          },\n          updatePano(pano) {\n            this.pano = pano;\n          },\n          updateCenter(latLng) {\n            this.reportedMapCenter = {\n              lat: latLng.lat(),\n              lng: latLng.lng(),\n            }\n          },\n          sync () {\n            this.mapCenter = this.reportedMapCenter\n          }\n        },\n        created() {\n          this.sync()\n        },\n      });\n    });\n  <\/script>\n</body>\n'})})}),"\n",(0,i.jsx)(e.h2,{id:"test-the-component",children:"Test the component"}),"\n",(0,i.jsx)(e.admonition,{type:"warning",children:(0,i.jsx)(e.p,{children:"Experimental"})}),"\n",(0,i.jsx)("eg-base",{children:(0,i.jsx)("eg-street-view-panorama",{})})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}},7252:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>r});var o=t(758);const i={},a=o.createContext(i);function s(n){const e=o.useContext(a);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),o.createElement(a.Provider,{value:e},n.children)}}}]);